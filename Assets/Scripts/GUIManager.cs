using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.LowLevel;

public enum UIState
{
    Default,
    Start,
    Pause,
    ControlMethodSelection,
}

public class GUIManager : MonoBehaviour
{
    [SerializeField] private GameObject pauseScreen;
    [SerializeField] private GameObject startScreen;
    [SerializeField] private GameObject controlMethodSelectorScreen;
    [SerializeField] private KeyboardAndMouseController keyBoardAndMouseController;
    private PlayerActionsAutoGenerated _playerActions;

    private UIState currentState = UIState.Start;
    private UIState storedUIState;

    //private bool tourTextDisabled=false;
    private bool tourEnterDisabled = false;

    public void Awake()
    {
        _playerActions = new PlayerActionsAutoGenerated();
        _playerActions.Player.Menu.performed += DisplayPauseScreen;
    }


    public void Start()
    {
        storedUIState = UIState.Start;
        SwitchState(storedUIState);
    }

    void OnEnable()
    {
        _playerActions.Player.Enable();
        // Subscribe to the OnKeyPress event
        //EventManager.OnKeyPress += HandleKeyPress;
        //EventManager.OnButtonPress += HandleButtonPress;
    }

    void OnDisable()
    {
        _playerActions.Player.Disable();
        // Unsubscribe to the OnKeyPress event
        //EventManager.OnKeyPress -= HandleKeyPress;
        //EventManager.OnButtonPress -= HandleButtonPress;
    }

    private void EnableMouse()
    {
        if (!WebGLPlatformChecker.IsWebGLMobile())
        {
            Cursor.lockState = CursorLockMode.None;
        }
    }

    private void DisableMouse()
    {
        if (!WebGLPlatformChecker.IsWebGLMobile())
        {
            Cursor.lockState = CursorLockMode.Locked;
        }
    }

    void SwitchState(UIState newState)
    {
        switch (newState)
        {

            case UIState.Pause:
                EnableMouse();
                Pause();
                pauseScreen.SetActive(true);
                break;

            case UIState.ControlMethodSelection:
                EnableMouse();
                Pause();
                controlMethodSelectorScreen.SetActive(true);
                break;
            case UIState.Start:

                EnableMouse();
                Pause();
                startScreen.SetActive(true);
                break;


            default:
                break;
        }

        currentState = newState;
    }

    void Pause(InputAction.CallbackContext context)
    {
        Debug.Log("Here1");
        keyBoardAndMouseController.enabled = false;
        Time.timeScale = 0;
        AudioListener.pause = true;

    }

    void Pause()
    {
        Debug.Log("Here2");
        keyBoardAndMouseController.enabled = false;
        Time.timeScale = 0;
        AudioListener.pause = true;

    }

    void Unpause()
    {
        Time.timeScale = 1;
        keyBoardAndMouseController.enabled = true;
        AudioListener.pause = false;

    }

    public void DisplayPauseScreen()
    {
        DeactivateScreens();
        SwitchState(UIState.Pause);
    }

    public void DisplayPauseScreen(InputAction.CallbackContext context)
    {
        DeactivateScreens();
        SwitchState(UIState.Pause);
    }

    public void DisplayControlMethodScreen(UIState uIState)
    {
        DeactivateScreens();
        storedUIState = uIState;
        SwitchState(UIState.ControlMethodSelection);
    }

    public void DisplayControlMethodScreen()
    {
        DeactivateScreens();
        SwitchState(UIState.ControlMethodSelection);
    }

    void HandleKeyPress(KeyCode pressedKey)
    {
        // If the escape key is pressed enable the preferences screen
        if (pressedKey == KeyCode.P)
        {
            if (CheckForOpenScreens() == false)
            {
                storedUIState = UIState.Default;
                DeactivateScreens();
                SwitchState(UIState.Pause);
            }
        }


    }

    private bool CheckForOpenScreens()
    {
        if (pauseScreen.activeSelf == true || controlMethodSelectorScreen.activeSelf == true)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public void DeactivateScreens()
    {
        DisableMouse();
        Unpause();
        pauseScreen.SetActive(false);
        controlMethodSelectorScreen.SetActive(false);
        startScreen.SetActive(false);
        if (storedUIState != UIState.Default)
        {
            SwitchState(storedUIState);
            storedUIState = UIState.Default;
        }
    }

}
