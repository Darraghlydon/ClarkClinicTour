using System;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.InputSystem;

public class PlayerControlFPS : MonoBehaviour
{
    private PlayerActionsAutoGenerated _playerActions;
    
    
    [Header("Movement Variables")] 
    [SerializeField]
    private float playerSpeed = 2.0f;

    [SerializeField] 
    private float lookSensitivity;


   
    private Vector3 _moveDirection;
    private Transform _myTransform;
    private Transform _myCameraTransform;

    private CharacterController _myController;
    private float _xRotation;
    private float _yRotation;
    
    private void Awake()
    {
        //instantiate our actions class so we can access the input system
        _playerActions = new PlayerActionsAutoGenerated();

        _playerActions.Player.Interact.performed += OnInteract;
       

    }

    // Start is called before the first frame update
    void Start()
    {
        _myController = GetComponent<CharacterController>();
        _myTransform = transform;
        _myCameraTransform = GetComponentInChildren<Camera>().transform;
    }

    void OnInteract(InputAction.CallbackContext context)
    {
        Debug.Log("Interact!");
    }

    // Update is called once per frame
    void Update()
    { 
        HandleMovement();
        HandleLook();
    }

    private void HandleMovement()
    {
        Vector2 moveVector = _playerActions.Player.Move.ReadValue<Vector2>();
        _moveDirection = new Vector3(moveVector.x, 0, moveVector.y);
        _moveDirection = _myTransform.TransformDirection(_moveDirection);
        _myController.Move((_moveDirection * (playerSpeed * Time.deltaTime)));
    }

    private void HandleLook()
    {
        Vector2 lookVector = _playerActions.Player.Look.ReadValue<Vector2>();

        
        _yRotation += lookVector.x * lookSensitivity;
        
        //The xrotation is subtracted to prevent inverted looking
        _xRotation -= lookVector.y * lookSensitivity;

        //Prevent the player from looking too far up or down
        _xRotation = Mathf.Clamp(_xRotation, -90.0f, 90.0f);
       
        //Add the rotation to the camera for up and down, and to the player to spin around
        _myCameraTransform.localRotation = Quaternion.Euler(_xRotation,0,0);
        _myTransform.rotation = Quaternion.Euler(0,_yRotation,0);
        

    }
    

    void OnEnable()
    {
        _playerActions.Player.Enable();
    }
    void OnDisable()
    {
        _playerActions.Player.Disable();
    }
    
    
}
